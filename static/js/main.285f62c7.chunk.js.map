{"version":3,"sources":["components/redux/contact/contact-action.js","components/redux/contact/contact-operations.js","components/redux/contact/contact-selector.js","components/Contact/ContactsList.js","components/Form/ContactForm.js","components/Filter/Filter.js","App.js","components/redux/contact/contact-reducer.js","components/redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","actions","changeFilter","axios","defaults","baseURL","getContact","state","contacts","contact","getFilter","filter","getVisibleContact","normalizedFilter","toLowerCase","text","name","includes","getFiteredContact","ContactsList","useSelector","dispatch","useDispatch","onDeleteContact","id","contactId","delete","then","catch","error","useEffect","a","get","data","length","map","number","className","onClick","ContactForm","useState","setName","setNumber","handleChange","target","value","reset","onSubmit","event","preventDefault","find","alert","post","addContact","type","placeholder","onChange","disabled","Filter","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","rootReducer","contactReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.285f62c7.chunk.js","sourcesContent":["// import { v4 as uniqueId } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nconst fetchContactRequest = createAction('contact/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contact/fetchContactSuccess');\r\nconst fetchContactError = createAction('contact/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contact/addContactRequest');\r\nconst addContactSuccess = createAction('contact/addContactSuccess');\r\nconst addContactError = createAction('contact/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacn/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contact/deleteContactSuccess');\r\nconst deleteContactError = createAction('contact/deleteContactError');\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\n// export const addContact = createAction(\r\n//   'contact/addContact',\r\n//   function prepare(name, number) {\r\n//     return {\r\n//       payload: {\r\n//         id: uniqueId(),\r\n//         name,\r\n//         number,\r\n//       },\r\n//     };\r\n//   },\r\n// );\r\n\r\n// const deleteContact = createAction('contact/deleteContact');\r\n// export const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: uniqueId(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n// export const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\nconst actions = {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  // deleteContact,\r\n  changeFilter,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n};\r\nexport default actions;\r\n","import axios from 'axios';\r\nimport actions from './contact-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n// export const fetchContact = () => dispatch => {\r\n//   dispatch(actions.fetchContactRequest());\r\n//   axios\r\n//     .get('/contact')\r\n//     .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(error));\r\n// };\r\n\r\n// асинхронний код\r\nexport const fetchContact = () => async dispatch => {\r\n  dispatch(actions.fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get(`/contact`);\r\n    dispatch(actions.fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.fetchContactError(error));\r\n  }\r\n};\r\n// export const addContact = (name, number) => dispatch => {\r\n//   const contact = { name, number };\r\n//   dispatch(actions.addContactRequest());\r\n//   axios\r\n//     .post('/contact', contact)\r\n//     .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n//     .catch(error => dispatch(error));\r\n// };\r\n//асинхронний код\r\nexport const addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n  dispatch(actions.addContactRequest());\r\n  try {\r\n    const { data } = await axios.post(`/contact`, contact);\r\n    dispatch(actions.addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contact/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(error));\r\n};\r\n","export const getContact = state => state.contacts.contact;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContact = state => {\r\n  const contacts = getContact(state);\r\n  const filter = getFilter(state);\r\n\r\n  const getFiteredContact = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(text =>\r\n      text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return getFiteredContact(contacts);\r\n};\r\n","import PropTypes from 'prop-types';\r\n// import { connect} from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import actions from '../redux/contact/contact-action';\r\nimport {\r\n  fetchContact,\r\n  deleteContact,\r\n} from '../redux/contact/contact-operations';\r\nimport './ContactsList.css';\r\nimport { getVisibleContact } from '../redux/contact/contact-selector';\r\nimport { useEffect } from 'react';\r\n\r\nfunction ContactsList() {\r\n  const contacts = useSelector(getVisibleContact);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContact());\r\n  }, [dispatch]); // dispatch як залежність.\r\n  return (\r\n    <>\r\n      {!contacts.length && <div>Немає жодного контакту</div>}\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id} className=\"item__contact\">\r\n            <p className=\"item__text\">{name}</p>\r\n            <p className=\"item__text\">{number}</p>\r\n            <button\r\n              className=\"item__buttom\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              стерти\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\nexport default ContactsList;\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter, contact } = state.contacts;\r\n//   const normalize = filter.toLowerCase().trim();\r\n//   const visibleContacts = contact.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalize),\r\n//   );\r\n\r\n//   return { contacts: visibleContacts };\r\n// };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact(id)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import { useState } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContact } from '../redux/contact/contact-selector';\r\n// import * as actions from '../redux/contact/contact-action';\r\nimport { addContact } from '../redux/contact/contact-operations';\r\nimport './ContactForm.css';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContact);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    const auditContact = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (auditContact) {\r\n      alert(`Контакт ${name} з таким ім’ям вже є.`);\r\n      reset();\r\n      return;\r\n    }\r\n    dispatch(addContact(name, number));\r\n    // onSubmit(name, number);\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  return (\r\n    <form className=\"item__form\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Ім’я\r\n        <input\r\n          className=\"item__input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Jony Dep\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Телефон\r\n        <input\r\n          className=\"item__input\"\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"111-11-11\"\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" disabled={name === '' || number === ''}>\r\n        Зберегти контакт\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nexport default ContactForm;\r\n// const mapStateToProps = ({ contacts: { contact } }) => ({\r\n//   contact,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n// });\r\n\r\n// export default connect(mapDispatchToProps)(ContactForm);\r\n","// import { connect }  from 'react-redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../redux/contact/contact-action';\r\nimport './Filter.css';\r\nimport { getFilter } from '../redux/contact/contact-selector';\r\nfunction Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className=\"item__filter\">\r\n      <p className=\"item__text-filter\">Пошук контактів</p>\r\n      <input\r\n        className=\"item__element\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event => dispatch(actions.changeFilter(event.target.value))}\r\n        // onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\nexport default Filter;\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(changeFilter(event.target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactsList from './components/Contact/';\r\nimport ContactForm from './components/Form/';\r\nimport Filter from './components/Filter/';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"Containet\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n// import { addContact, deleteContact, changeFilter } from './contact-action';\r\nimport actions from './contact-action';\r\n\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// const contacTest = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\nconst contact = createReducer([], {\r\n  [actions.fetchContactSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\nconst error = createReducer(null, {\r\n  [actions.fetchContactError]: (_, { payload }) => payload,\r\n  [actions.fetchContactRequest]: () => null,\r\n});\r\n// const contact = (state = contacTest, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return [...state, payload];\r\n//     case DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst loading = createReducer(false, {\r\n  [actions.addContactRequest]: () => false,\r\n  [actions.addContactSuccess]: () => true,\r\n  [actions.addContactError]: () => false,\r\n  [actions.deleteContactRequest]: () => false,\r\n  [actions.deleteContactSuccess]: () => true,\r\n  [actions.deleteContactError]: () => false,\r\n  [actions.fetchContactRequest]: () => false,\r\n  [actions.fetchContactSuccess]: () => true,\r\n  [actions.fetchContactError]: () => false,\r\n});\r\nexport default combineReducers({\r\n  contact,\r\n  loading,\r\n  filter,\r\n  error,\r\n});\r\n","// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactReducer from './contact/contact-reducer';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  // persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nconst rootReducer = combineReducers({ contacts: contactReducer });\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n// export const persistor = persistStore(store);\r\n\r\n// const rootReducer = combineReducers({ contacts: contactReducer });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './components/redux/store';\r\n\r\n// import { store, persistor } from './components/redux/store';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}